---
interface Props extends astroHTML.JSX.InputHTMLAttributes {
  label?: string;
  name: string;
  id?: string;
}

const { name, id = `${name}-input`, label, placeholder, type } = Astro.props;
---

<div class="input-field">
  {
    (label || Astro.slots.has("label")) && (
      <label for={id} class="input-label">
        <slot name="label">{label}</slot>
      </label>
    )
  }
  <div class="input-box">
    <input {...Astro.props} id={id} placeholder={placeholder} />
    {
      type === "password" && (
        <div class="password-toggle">
          <button type="button" class="password-show">
            show
          </button>
          <button type="button" hidden class="password-hide">
            hide
          </button>
        </div>
      )
    }
  </div>
</div>

<script>
  const inputBoxes = document.getElementsByClassName("input-box");

  for (const inputBox of inputBoxes) {
    const passwordToggle = inputBox.querySelector(".password-toggle");
    if (!passwordToggle) continue;

    const input = inputBox.querySelector<HTMLInputElement>("input")!;
    const showButton =
      passwordToggle.querySelector<HTMLButtonElement>(".password-show")!;
    const hideButton =
      passwordToggle.querySelector<HTMLButtonElement>(".password-hide")!;

    showButton.addEventListener("click", () => {
      showButton.hidden = true;
      hideButton.hidden = false;
      input.type = "text";
    });

    hideButton.addEventListener("click", () => {
      hideButton.hidden = true;
      showButton.hidden = false;
      input.type = "password";
    });
  }
</script>

<style>
  .input-field {
    display: flex;
    flex-direction: column;
  }
  .input-box {
    border-radius: 0.5em;
    background-color: #eee;
    display: flex;
    align-items: center;
    padding: 0.5em;
    gap: 0.5em;
    overflow: hidden;
    transition: background-color 0.2s;
  }
  .input-box:hover,
  .input-box:focus-within {
    background-color: #ddd;
  }
  .input-box > input {
    all: unset;
    background: none;
    width: 100%;
  }
  .password-toggle {
    height: 100%;
  }
  .password-toggle > button {
    border: unset;
    background: unset;
    height: 100%;
  }
</style>
